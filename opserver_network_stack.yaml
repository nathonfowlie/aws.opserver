---
AWSTemplateFormatVersion: 2010-09-09

Description: This template provisions the networking infrastructure used by the opserver service.

Parameters:
  EnvironmentName:
    Description: The name of the environment (dev, tst, stg, prd). This is appended to resource names.
    Type: String
    Default: dev
  VPCCIDR:
    Description: IP Range for this VPC
    Type: String
    Default: 10.0.0.0/16
  AZ1PrivateSubnetCIDR:
    Description: IP Range for the private subnet of the first Availability Zone.
    Type: String
    Default: 10.0.10.0/24
  AZ1PublicSubnetCIDR:
    Description: IP Range for the public subnet of the first Availability Zone.
    Type: String
    Default: 10.0.11.0/24
  AZ2PrivateSubnetCIDR:
    Description: IP Range for the private subnet of the second Availability Zone.
    Type: String
    Default: 10.0.20.0/24
  AZ2PublicSubnetCIDR:
    Description: IP range for the public subnet of the second Availability Zone.
    Type: String
    Default: 10.0.21.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub Opserver (${EnvironmentName})
        - Key: Environment
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub Opserver Internet Gateway (${EnvironmentName})
        - Key: Environment
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  AZ1PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref AZ1PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
  AZ1PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref AZ1PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
  AZ2PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref AZ2PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
  AZ2PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref AZ2PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
  NatGatewayAZ1ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
  NatGatewayAZ2ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
  NatGatewayAZ1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAZ1ElasticIP.AllocationId
      SubnetId: !Ref AZ1PublicSubnet
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
  NatGatewayAZ2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAZ2ElasticIP.AllocationId
      SubnetId: !Ref AZ2PublicSubnet
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Public Routes (${EnvironmentName})
        - Key: Environment
          Value: !Ref EnvironmentName
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  AZ1PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref AZ1PublicSubnet
  AZ2PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref AZ2PublicSubnet
  AZ1PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
  AZ2PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
  AZ1DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AZ1PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZ1
  AZ2DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AZ2PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZ2
  AZ1PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AZ1PrivateRouteTable
      SubnetId: !Ref AZ1PrivateSubnet
  AZ2PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AZ2PrivateRouteTable
      SubnetId: !Ref AZ2PrivateSubnet
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: no-ingress-sg
      GroupDescription: Security group with no ingress rules.
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: A list of public subnets
    Value: !Join [',', [!Ref AZ1PublicSubnet, !Ref AZ2PublicSubnet]]
  PrivateSubnets:
    Description: A list of private subnets
    Value: !Join [',', [!Ref AZ1PrivateSubnet, !Ref AZ2PrivateSubnet]]
  AZ1PublicSubnet:
    Description: A reference to the public subnet created in availability zone 1.
    Value: !Ref AZ1PublicSubnet
  AZ1PrivateSubnet:
    Description: A reference to the private subnet created in availability zone 1.
    Value: !Ref AZ1PrivateSubnet
  AZ2PublicSubnet:
    Description: A reference to the public subnet created in availability zone 2.
    Value: !Ref AZ2PublicSubnet
  AZ2PrivateSubnet:
    Description: A reference to the private subnet created in availability zone 2.
    Value: !Ref AZ2PrivateSubnet
  NoIngressSecurityGroup:
    Description: A reference to the security group with no ingress rules.
    Value: !Ref NoIngressSecurityGroup
